CREATE TABLE User (
  userId INT PRIMARY KEY AUTO_INCREMENT,
  cognitoId VARCHAR(255) UNIQUE NOT NULL,
  username VARCHAR(255) UNIQUE NOT NULL,
  email VARCHAR(255) UNIQUE NOT NULL,
  profilePictureUrl VARCHAR(255),
  companyId INT,
  roleId INT,
  isActive BOOLEAN DEFAULT TRUE,
  teamId INT,
  createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
  updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (teamId) REFERENCES Team(id) ON DELETE SET NULL,
  FOREIGN KEY (companyId) REFERENCES Company(id) ON DELETE CASCADE,
  FOREIGN KEY (roleId) REFERENCES Role(id) ON DELETE SET NULL
);

CREATE TABLE Company (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL,
  subscriptionStatus ENUM('ACTIVE', 'INACTIVE', 'TRIAL') NOT NULL DEFAULT 'TRIAL',
  subscriptionEndDate DATETIME,
  createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
  updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE Role (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(50) NOT NULL,
  description TEXT,
  createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
  updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE Invitation (
  id INT PRIMARY KEY AUTO_INCREMENT,
  email VARCHAR(255) NOT NULL,
  companyId INT NOT NULL,
  roleId INT NOT NULL,
  teamId INT,
  token VARCHAR(255) UNIQUE NOT NULL,
  status ENUM('PENDING', 'ACCEPTED', 'EXPIRED') NOT NULL DEFAULT 'PENDING',
  expiresAt DATETIME NOT NULL,
  invitedBy INT NOT NULL,
  createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
  updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (companyId) REFERENCES Company(id) ON DELETE CASCADE,
  FOREIGN KEY (roleId) REFERENCES Role(id) ON DELETE CASCADE,
  FOREIGN KEY (teamId) REFERENCES Team(id) ON DELETE SET NULL,
  FOREIGN KEY (invitedBy) REFERENCES User(userId) ON DELETE CASCADE
);

INSERT INTO Role (name, description) VALUES
('SYSTEM_ADMIN', 'System Admin'),
('COMPANY_ADMIN', 'Company Admin'),
('PROJECT_MANAGER', 'Project Manager'),
('TEAM_LEADER', 'Team Leader'),
('TEAM_MEMBER', 'Team Member');

CREATE TABLE Team (
  id INT PRIMARY KEY AUTO_INCREMENT,
  teamName VARCHAR(255) NOT NULL,
  productOwnerUserId INT,
  projectManagerUserId INT,
  createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
  updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (productOwnerUserId) REFERENCES User(userId) ON DELETE SET NULL,
  FOREIGN KEY (projectManagerUserId) REFERENCES User(userId) ON DELETE SET NULL
);

CREATE TABLE Project (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  startDate DATETIME,
  endDate DATETIME,
  createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
  updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE ProjectTeam (
  id INT PRIMARY KEY AUTO_INCREMENT,
  teamId INT NOT NULL,
  projectId INT NOT NULL,
  createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
  updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (teamId) REFERENCES Team(id) ON DELETE CASCADE,
  FOREIGN KEY (projectId) REFERENCES Project(id) ON DELETE CASCADE
);

CREATE TABLE Task (
  id INT PRIMARY KEY AUTO_INCREMENT,
  title VARCHAR(255) NOT NULL,
  description TEXT,
  status ENUM('TODO', 'IN_PROGRESS', 'REVIEW', 'DONE') NOT NULL DEFAULT 'TODO',
  priority ENUM('LOW', 'MEDIUM', 'HIGH', 'URGENT') NOT NULL DEFAULT 'MEDIUM',
  tags VARCHAR(255),
  startDate DATETIME,
  dueDate DATETIME,
  points INT,
  projectId INT NOT NULL,
  authorUserId INT NOT NULL,
  assignedUserId INT,
  createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
  updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (projectId) REFERENCES Project(id) ON DELETE CASCADE,
  FOREIGN KEY (authorUserId) REFERENCES User(userId) ON DELETE CASCADE,
  FOREIGN KEY (assignedUserId) REFERENCES User(userId) ON DELETE SET NULL
);

CREATE TABLE TaskAssignment (
  id INT PRIMARY KEY AUTO_INCREMENT,
  userId INT NOT NULL,
  taskId INT NOT NULL,
  createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
  updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (userId) REFERENCES User(userId) ON DELETE CASCADE,
  FOREIGN KEY (taskId) REFERENCES Task(id) ON DELETE CASCADE
);

CREATE TABLE Attachment (
  id INT PRIMARY KEY AUTO_INCREMENT,
  fileURL VARCHAR(255) NOT NULL,
  fileName VARCHAR(255),
  taskId INT NOT NULL,
  uploadedById INT NOT NULL,
  createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
  updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (taskId) REFERENCES Task(id) ON DELETE CASCADE,
  FOREIGN KEY (uploadedById) REFERENCES User(userId) ON DELETE CASCADE
);

CREATE TABLE Comment (
  id INT PRIMARY KEY AUTO_INCREMENT,
  text TEXT NOT NULL,
  taskId INT NOT NULL,
  userId INT NOT NULL,
  createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
  updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (taskId) REFERENCES Task(id) ON DELETE CASCADE,
  FOREIGN KEY (userId) REFERENCES User(userId) ON DELETE CASCADE
);

CREATE TABLE ChatRoom (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(255),
  isGroup BOOLEAN DEFAULT FALSE,
  createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
  updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE Message (
  id INT PRIMARY KEY AUTO_INCREMENT,
  content TEXT NOT NULL,
  createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
  updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  senderId INT NOT NULL,
  chatRoomId INT NOT NULL,
  FOREIGN KEY (senderId) REFERENCES User(userId) ON DELETE CASCADE,
  FOREIGN KEY (chatRoomId) REFERENCES ChatRoom(id) ON DELETE CASCADE
);

CREATE TABLE ChatRoomMembers (
  chatRoomId INT NOT NULL,
  userId INT NOT NULL,
  PRIMARY KEY (chatRoomId, userId),
  FOREIGN KEY (chatRoomId) REFERENCES ChatRoom(id) ON DELETE CASCADE,
  FOREIGN KEY (userId) REFERENCES User(userId) ON DELETE CASCADE
);

CREATE TABLE Sprint (
  id INT PRIMARY KEY AUTO_INCREMENT,
  projectId INT NOT NULL,
  name VARCHAR(255) NOT NULL,
  startDate DATETIME NOT NULL,
  endDate DATETIME NOT NULL,
  status ENUM('PLANNED', 'ACTIVE', 'COMPLETED') NOT NULL DEFAULT 'PLANNED',
  createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
  updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (projectId) REFERENCES Project(id) ON DELETE CASCADE
);

CREATE TABLE TaskDependency (
  id INT PRIMARY KEY AUTO_INCREMENT,
  taskId INT NOT NULL,
  dependsOnTaskId INT NOT NULL,
  createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (taskId) REFERENCES Task(id) ON DELETE CASCADE,
  FOREIGN KEY (dependsOnTaskId) REFERENCES Task(id) ON DELETE CASCADE
);
