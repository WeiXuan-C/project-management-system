'use client';

import { useEffect } from 'react';
import { useRouter, usePathname } from 'next/navigation';
import Cookies from 'js-cookie';

const PUBLIC_PATHS = [
  '/login',
  '/signup',
  '/forgot-password',
  '/auth/callback',
  '/auth/verify',
  '/terms',
  '/privacy',
  '/admin/adminLogin',
];
const SPECIAL_PATHS = ['/auth', '/reset-password', '/pricing', '/payment', '/admin/adminLogin' ]; // ÁâπÊÆäË∑ØÂæÑÔºåÂç≥‰ΩøÁî®Êà∑Â∑≤ÁôªÂΩï‰πüÂÖÅËÆ∏ËÆøÈóÆ

export default function RouteGuard({ children }) {
  const router = useRouter();
  const pathname = usePathname();

  useEffect(() => {
    // ÂøΩÁï•ÊâÄÊúâÁÆ°ÁêÜÂëòÈ°µÈù¢ÔºåËÆ©ÁÆ°ÁêÜÂëòÂ∏ÉÂ±ÄÂ§ÑÁêÜÂÆÉ‰ª¨ÁöÑËÆ§ËØÅ
    if (pathname.startsWith('/admin') && pathname !== '/admin/adminLogin') {
      return; // ÁÆ°ÁêÜÂëòË∑ØÁî±Áî±ÂÆÉ‰ª¨Ëá™Â∑±ÁöÑÂ∏ÉÂ±ÄÂ§ÑÁêÜËÆ§ËØÅ
    }

    const checkAuth = async () => {
      // check for auth_token (will only work if not httpOnly)
      const isLoggedIn = Cookies.get('auth_token');
      
      // Ê£ÄÊü•ÊòØÂê¶ÊòØÂÖ¨ÂºÄË∑ØÂæÑ - ‰ΩøÁî®Êõ¥Á≤æÁ°ÆÁöÑÂåπÈÖç
      const isPublicPath = PUBLIC_PATHS.some(path => {
        // Á°Æ‰øùÁ≤æÁ°ÆÂåπÈÖçË∑ØÂæÑÔºåÈÅøÂÖçÈÉ®ÂàÜÂåπÈÖç
        if (path.endsWith('/')) {
          return pathname === path || pathname.startsWith(path);
        }
        return pathname === path;
      });
      
      // Ê£ÄÊü•ÊòØÂê¶ÊòØÁâπÊÆäË∑ØÂæÑÔºàÂ¶ÇÈáçÁΩÆÂØÜÁ†ÅÔºâ
      const isSpecialPath = SPECIAL_PATHS.some(path => pathname.startsWith(path));
      
      // Get current locale
      const locale = pathname.split('/')[1] || 'en';

      console.log('üîí Auth check:', { 
        path: pathname,
        isLoggedIn,
        hasAuthToken: Boolean(isLoggedIn),
        authTokenPrefix: isLoggedIn ? `${isLoggedIn.substring(0, 10)}...` : null,
        isPublicPath,
        isSpecialPath
      });

      // If user is not logged in and not accessing public or special paths, redirect to login
      if (!isLoggedIn && !isPublicPath && !isSpecialPath) {
        console.log('‚ö†Ô∏è Not logged in, redirecting to login');
        router.replace(`/${locale}/login`);
        return;
      }

      // If user is logged in and accessing login/signup pages (but not special paths), redirect to projects
      if (isLoggedIn && isPublicPath && !isSpecialPath && pathname !== '/') {
        console.log('‚ö†Ô∏è Already logged in, redirecting to projects');
        router.replace(`/${locale}/projects`);
        return;
      }
    };

    checkAuth();
  }, [pathname, router]);

  return children;
} 